/**
 * // Get formatted date for "daysAgo"
 * @param daysAgo
 * @returns {string} formatted date
 */
import { Sensor } from "./Sensor.js";
import { SensorDisplay } from "./SensorDisplay.js";

//const HOST = "get.php;"
const HOST = "http://192.168.0.2/tellstick/get.php";
let sens = [];          // All sensors read from server including data readings
let positions = [];     // Array of selected { sensorid, label } ordered from top down
let durationDays = 1;

function getDate(daysAgo) {

    //If no arguments are passed then return today
    if ( daysAgo == null ) { daysAgo = 0; }

    let d = new Date();
    d.setDate(d.getDate() -daysAgo);

    let year = String(d.getFullYear());
    let month = String(d.getMonth() + 1);
    let day = String(d.getDate());
    if ( month.length == 1 ) { month = '0' + month; }
    if ( day.length == 1) { day = '0' + day; }
    return year + month + day;
}

function getCookie(cname) {
    const name = cname + "=";
    const ca = document.cookie.split(';');

    for(let i = 0; i < ca.length; i++) {
        let c = ca[i];

        // Remove preceding blanks from property name
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }

        if (c.indexOf(name) == 0) {
            // console.log(c.substring(name.length, c.length));
            return c.substring(name.length, c.length);
        }
    }
    // No cookie found
    return '';
}

function loadPositions() {
    const sPos = getCookie("sPositions");
    if (sPos) {
        return JSON.parse(sPos);
    }
    console.log("found no saved positions.");
}

// Store the list positions and sensor ids in a cookie
function savePositions() {

    const stringified = JSON.stringify(positions);
    const days = 30;
    const date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    const expires = "expires=" + date.toUTCString();
    document.cookie = "sPositions=" + stringified + ";" + expires + ";path=/";
}

function callbackReceivedData(serverReply) {
    if (serverReply.readyState == 4 && serverReply.status == 200) {
        let recData = serverReply.responseText.split(";");

        // Remove last element in list as it is empty (generated by string.split)
        recData.pop();
        createSensors(recData);
        updateScreen();
    } else {
        // console.debug('state: ' + serverReply.readyState + ' status: ' + serverReply.status);
    }
    //alert("Could not get sensor data from server \n" + serverReply.readyState + "\n" + serverReply.status);
}

function createSensors(recData) {
    // console.debug('number of rows received: ' + recData.length);

    // Find all sensors
    let sensors = [];
    for (let i = 0; i < recData.length; i++) {
        let foundId = recData[i].split(",")[2];
        if (!sensors.includes(foundId)) {
            sensors.push(foundId);
        }
    }

    // Create one object for each sensor id
    for (let s = 0; s < sensors.length; s++) {
        sens[s] = new Sensor(recData, sensors[s]);
    }

    // Load positions from cookie
    positions = loadPositions();

    // If no sensors are stored in cookie since before, lets set the first ones found..
    if (!positions || positions.length < 1) {
        console.log("empty positions, filling");
        positions = [];
        for (let i = 0; i < sens.length; i++) {

            positions.push( {
                id: sens[i].id,
                label: ""
            });
        }
        savePositions()
    }

}

function sendRequest(fromDay, toDay, callback) {
    let xhr = new XMLHttpRequest();
    //xhr.open("POST", "http://192.168.0.2/tellstick/get.php");
    xhr.open("POST", HOST);
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr.addEventListener('readystatechange', function () { callback(xhr) }, false);
    xhr.send('fDate=' + fromDay + '&tDate=' + toDay);
}

/**
 * Callback used by sensors to signal configuration change
 */
const callback = function() {
    savePositions();
    updateScreen();
}

function updateScreen() {

    const displays = document.getElementById("displays");

    // Clear display
    while (displays.hasChildNodes()) {
        displays.removeChild(displays.firstChild);
    }


    // Create all displays

    for (let pos = 0; pos < positions.length; pos++) {
        const sensorDisplay = document.createElement("sensor-display");

        // Provide the sensor with everything it needs
        sensorDisplay.setup = {
            callback: callback,             // Callback function to save settings and update screen
            sensorPositions: positions,     // All available positions
            position: pos,                  // Index position of current sensor
            sensors: sens                   // All available sensor id's
        }

        sensorDisplay.showDigits();
        displays.appendChild(sensorDisplay);
    }


    // "Add sensor" DISPLAY
    const addDiv = document.createElement("div");
    const addBtn = document.createElement("button");
    addDiv.id = "addDiv";
    addBtn.id = "addBtn";
    addBtn.textContent = "Add sensor";

    addBtn.addEventListener("click", function () {
        const sensorDisplay = document.createElement("sensor-display");
        const newPos = positions.push({
            id: null,
            label: "New sensor name"
        }) - 1;

        sensorDisplay.setup = {
            callback: callback,             // Callback function to save settings and update screen
            sensorPositions: positions,     // All available positions
            position: newPos,               // Index position of current sensor
            sensors: sens                   // All available sensor id's
        }

        sensorDisplay.showSettings();
        displays.insertBefore(sensorDisplay, addDiv);
    });

    addDiv.appendChild(addBtn);
    displays.appendChild(addDiv);

    // CHANGE DURATION
    const daysDiv = document.createElement("div");
    const daysSelector = document.createElement("input");
    daysSelector.type = "number";
    daysSelector.id = "daysSelector";
    daysDiv.id = "daysDiv";
    daysSelector.min = 1;
    daysSelector.value = durationDays;
    const daysBtn = document.createElement("button");
    daysBtn.id = "daysBtn";

    daysBtn.textContent = "Change duration";
    daysBtn.addEventListener("click", function() {
        const days = daysSelector.value;
        if (days == durationDays) return;
        durationDays = days;
        sendRequest(getDate(durationDays), getDate(0), callbackReceivedData);
    });


    daysDiv.appendChild(document.createTextNode("Period (days)"));
    daysDiv.appendChild(daysSelector);
    daysDiv.appendChild(daysBtn);



    displays.appendChild(daysDiv);


}



// Entrypoint
sendRequest(getDate(durationDays), getDate(0), callbackReceivedData);